// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String @id @default(uuid()) 
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?  
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts Account[] @relation("Social Accounts")
}

model Account {
  id                 String @id @default(uuid())
  userId             String   
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation("Social Accounts",fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

// model User {
//   id              String @id @default(auto()) @map("_id") @db.ObjectId
//   name            String?
//   email           String?   @unique
//   emailVerified   DateTime?
//   image           String?  
//   hashedPassword  String?
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt

//   accounts Account[]
// }

// model Account {
//   id                 String @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String   @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.String
//   access_token       String?  @db.String
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.String
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Store {
//   id              String    @id @default(auto()) @map("_id") @db.ObjectId
//   name            String    
//   userId          String
//   createdAt       DateTime   @default(now())
//   updatedAt       DateTime   @updatedAt

//   billboards Billboard[] @relation("StoreToBillboard")
// }


// model Billboard{
//   id             String  @id @default(auto()) @map("_id") @db.ObjectId
//   storeId        String  @db.ObjectId
//   store          Store   @relation("StoreToBillboard", fields:[storeId] , references: [id])
//   label          String
//   imageUrl       String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

//   @@index([storeId])
// }